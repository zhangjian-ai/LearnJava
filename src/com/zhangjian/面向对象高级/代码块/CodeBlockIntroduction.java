package com.zhangjian.面向对象高级.代码块;

/**
 * 概念：
 *     代码块又称为初始化块，属于类中的成员(是类的一部分)，类似于方法，将逻辑语句封装在方法体中，通过 {} 包围起来。
 *     代码块和成员方法不同的是，代码块没有方法名、没有返回、没有参数，只有方法体，而且不用通过 对象或类 显式调用，而是在 类加载时 或 对象创建时隐式调用。
 *
 * 语法：
 *     [修饰符]{
 *         代码
 *     };
 *
 *     语法说明：
 *       1、修饰符可选，要写的话，也只能写 static
 *       2、代码块分为两类。使用 static 修饰的叫静态代码块，没有使用 static 的叫普通代码块
 *       3、最后的分号，也可以省略
 *
 * 代码块使用的理解：
 *     相当于另一种形式的构造器，可以做初始化的操作。
 *     例如，重载的多个构造器中都有相同的逻辑，那么就可以提取到代码块中，以提高代码的复用性
 *
 * 使用说明：
 *   1、static代码块也叫静态代码块，作用是对类进行初始化(注意：不是对象初始化)，当类被加载时隐式执行。下面说明类什么时候被加载：
 *      1.1、创建对象实例时(new)
 *      1.2、创建子类对象的实例时，会先加载父类，再加载子类
 *      1.3、使用类的静态成员(静态属性、静态方法)时
 *      1.4、使用子类的静态成员时，会先加载父类，再加载子类
 *   2、普通代码块，作用是进行对象的初始化，每创建一个对象都会执行。创建一个类的多个实例，类只会在首次创建时加载一次
 *   3、如果只是使用静态成员，普通代码块不会执行
 *   4、静态代码块和静态属性在类加载时调用的优先级是一样的，如果有多个 静态代码块和多个静态属性，那么调用时按他们定义的顺序依次调用
 *   5、普通代码块和普通属性在对象初始化时调用优先级是一样的，如果有多个 普通代码块和多个普通属性，那么调用时按他们定义的顺序依次调用
 *
 */
public class CodeBlockIntroduction {
    public static void main(String[] args) {
        System.out.println("创建第一个对象");
        AA aa = new AA();

        /**
         * 打印信息如下，首次创建时，类要完成一次加载
         * static 返回一个名字，给 静态属性赋值
         * 第一个静态代码块
         * 第二个静态代码块
         * 返回一个昵称，给 实例属性赋值
         * 第一个普通代码块
         * 第二个普通代码块
         */

        System.out.println("创建第二个对象");
        AA aa1 = new AA();

        /**
         * 打印信息如下，多次创建实例，类不会重复加载
         * 返回一个昵称，给 实例属性赋值
         * 第一个普通代码块
         * 第二个普通代码块
         */
    }
}

class AA{
    // 静态属性
    public static String name = getName();

    // 静态代码块
    static {
        System.out.println("第一个静态代码块");
    }

    static {
        System.out.println("第二个静态代码块");
    }

    // 实例属性
    private String nickname = getNickname();

    // 普通代码块
    {
        System.out.println("第一个普通代码块");
    }

    {
        System.out.println("第二个普通代码块");
    }

    public static String getName(){
        System.out.println("static 返回一个名字，给 静态属性赋值");
        return "Jack";
    }

    public String getNickname(){
        System.out.println("返回一个昵称，给 实例属性赋值");
        return "大锤";
    }

}
